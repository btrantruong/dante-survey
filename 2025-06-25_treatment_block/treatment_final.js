Qualtrics.SurveyEngine.addOnload(function()
{
	/*Place your JavaScript here to run when the page loads*/
	//this.hideNextButton();

});

Qualtrics.SurveyEngine.addOnReady(function()
{
	/*Place your JavaScript here to run when the page is fully displayed*/
	
	// Get DOM elements with null checks
	var llmDot = document.getElementById('LLM1_dot');
	var chatInput = document.getElementById('chatInput');
	var submitBtn = document.getElementById('submit-btn');
	var chat = document.getElementById('chatBox');
	
	// Check if required elements exist
	if (!llmDot || !chatInput || !submitBtn || !chat) {
		console.error('Required DOM elements not found');
		return;
	}
	
	llmDot.style.display = "block";
	chatInput.disabled = true;
	submitBtn.disabled = true;

	/*TODO : We need to handle errors due to missing summary for offline server, etc.*/
	/*TODO : We need to add an error div at the frontend that warns the participant that there has been an error and what to do to handle it.*/

	/*TODO : Add error handling due to missing summary*/
	//var summary = Qualtrics.SurveyEngine.getEmbeddedData('summary') || "[missing summary]";

	/*TODO : QUERY LLM HERE!*/
	var LLMmessage = "The message generated by LLM will appear here.";

	console.log(LLMmessage);

	/*TODO : Add error handling if LLM doesn't give a response*/
	if (LLMmessage) {
		llmDot.style.display = "none";
		var interactions = chat.querySelectorAll("div");
		for (var i = 0; i < interactions.length; i++) {
			var interaction = interactions[i];
			var placeholder = interaction.innerHTML;
			if (placeholder.trim() == 'LLMPlaceholder') {
				interaction.innerHTML = LLMmessage;
				interaction.style.display = "block";
				break;
			}
		}

		chatInput.disabled = false;
		// Remove existing event listener to prevent duplicates
		chatInput.removeEventListener('input', handleInputChange);
		chatInput.addEventListener('input', handleInputChange);
	}
	
	// Event handler function for input changes
	function handleInputChange() {
		if (chatInput.value.trim() !== '') {
			submitBtn.disabled = false;
		} else {
			submitBtn.disabled = true;
		}
	}
	
	submitBtn.onclick = function(event) {
		var message = chatInput.value.trim();
		if (message) {
			var interactions = chat.querySelectorAll("div");
			for (var i = 0; i < interactions.length; i++) {
				var interaction = interactions[i];
				var placeholder = interaction.innerHTML;
				if (placeholder.trim() == 'UserPlaceholder') {
					interaction.innerHTML = message;
					interaction.style.display = "block";
					break;
				}
			}
			chatInput.value = '';
			chat.scrollTop = chat.scrollHeight;
			LLMTalk();
		}
	};

	// Function to send chat to OpenRouter API
	function sendChatToOpenRouter(userMessage, onSuccess, onError) {
		// Get embedded data with fallbacks for testing
		var pid = Qualtrics.SurveyEngine.getEmbeddedData('party') || 'Democrat';
		var treatment = Qualtrics.SurveyEngine.getEmbeddedData('in_out_group') || 'outgroup_agree';
		var group = Qualtrics.SurveyEngine.getEmbeddedData('group') || 'Democrat';
		var topic = Qualtrics.SurveyEngine.getEmbeddedData('topic') || 'Gun Rights';

		console.log("PID:", pid);
		console.log("Treatment:", treatment);
		console.log("Group:", group);
		console.log("Topic:", topic);

		var optional_disagreement_blurb = '';
		if (treatment == 'outgroup_disagree' || treatment == 'ingroup_disagree') {
			optional_disagreement_blurb = ', even though it is not typical for ' + group + ' to do so. ';
		}

		var system_prompt = 'You are a chatbot designed to reflect the values and viewpoints typically associated with ' + group + '. ' +
			'You will be having a conversation with a person who is ' + pid + ' where you show that some ' + group + ' agree with the participant\'s stance on ' + topic + optional_disagreement_blurb + 
			'Present well-reasoned supporting arguments. Maintain respect throughout the conversation and use simple language that an average person can understand. ' +
			'Nudge the participant towards keeping the conversation going by asking questions and making comments that encourage them to share their thoughts. Keep your responses short and concise.';

		// Get API key from Qualtrics embedded data
		var apiKey = Qualtrics.SurveyEngine.getEmbeddedData('OpenRouterAPIKey');
		var OR_model = Qualtrics.SurveyEngine.getEmbeddedData('setModel') || "mistralai/mistral-small-3.2-24b-instruct";
		
		// Debug: Check if API key is available
		console.log("API Key available:", apiKey ? "Yes" : "No");
		console.log("API Key length:", apiKey ? apiKey.length : 0);
		console.log("Model:", OR_model);

		// Fallback to hardcoded key if embedded data is not available (for testing)
		if (!apiKey) {
			apiKey = "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";
			console.log("Using fallback API key");
		}

		var url = "https://openrouter.ai/api/v1/chat/completions";
		var headers = {
			"Authorization": "Bearer " + apiKey,
			"Content-Type": "application/json"
		};
		
		// Debug: Log headers (without showing full API key)
		console.log("Headers:", {
			"Authorization": "Bearer " + (apiKey ? apiKey.substring(0, 10) + "..." : "undefined"),
			"Content-Type": headers["Content-Type"]
		});
		
		var payload = {
			"model": OR_model,
			"messages": [
				{
					"role": "system",
					"content": system_prompt
				},
				{
					"role": "user",
					"content": userMessage
				}
			],
			"stream": false
		};

		console.log("Payload:", payload);

		// Use XMLHttpRequest instead of fetch for better browser compatibility
		var xhr = new XMLHttpRequest();
		xhr.open("POST", url, true);
		xhr.setRequestHeader("Authorization", "Bearer " + apiKey);
		xhr.setRequestHeader("Content-Type", "application/json");
		
		xhr.onreadystatechange = function() {
			if (xhr.readyState === 4) {
				console.log("Response status:", xhr.status);
				
				if (xhr.status === 200) {
					try {
						var data = JSON.parse(xhr.responseText);
						console.log("Response data:", data);
						var gptResponse = data.choices[0].message.content;
						onSuccess(gptResponse);
					} catch (error) {
						console.error("Error parsing response:", error);
						onError("Error: Invalid response format");
					}
				} else {
					console.error("Error response body:", xhr.responseText);
					onError("Error: HTTP " + xhr.status + " - " + xhr.responseText);
				}
			}
		};
		
		xhr.onerror = function() {
			console.error("Network error occurred");
			onError("Error: Network error occurred");
		};
		
		try {
			xhr.send(JSON.stringify(payload));
		} catch (error) {
			console.error("Error sending request:", error);
			onError("Error: " + error.message);
		}
	}

	function LLMTalk() {
		chatInput.disabled = true;
		submitBtn.disabled = true;


		var limit_turns = 5;

		//Get the whole thread of conversation and also the position of the LLM to write
		var all_interactions = [];
		//all_interactions.push('User:'+summary);
		var LLMposition = "";
		var interactions = chat.querySelectorAll("div");
		for (var i = 0; i < interactions.length; i++) {
			var interaction = interactions[i];
			var placeholder = interaction.innerHTML;
			var idd = interaction.id;
			if (placeholder.trim() == 'LLMPlaceholder'){
				LLMposition = idd;
				break;
			}
			if (idd.endsWith("dot"))
				continue;
			if (idd.startsWith("LLM"))
				all_interactions.push('LLM:'+placeholder);
			else if (idd.startsWith("user"))
				all_interactions.push('User:'+placeholder);
		}

		console.log(all_interactions);

		// Check conversation length limit (5 turns = 10 interactions)
		if (all_interactions.length >= limit_turns) {
			var limitMessage = "Thank you for the conversation! We've reached the maximum number of exchanges. Please proceed to the next question.";
			document.getElementById(LLMposition).innerHTML = limitMessage;
			document.getElementById(LLMposition).style.display = "block";
			return;
		}

		var dott_id = LLMposition.split("_")[0] + '_dot';
		var dotElement = document.getElementById(dott_id);
		if (dotElement) {
			dotElement.style.display = "block";
		}

		// Get system message and user message from embedded data
		// var systemMessage = Qualtrics.SurveyEngine.getEmbeddedData('systemPrompt') || "You are a helpful assistant.";
		var userMessage = all_interactions.join('\n'); // Combine all interactions into one message

		// Send to OpenRouter API
		console.log("** Sending to OpenRouter API **");
		sendChatToOpenRouter(userMessage, function(response) {
			console.log("OpenRouter says:", response);
			
			// Hide loading dot and display response
			if (dotElement) {
				dotElement.style.display = "none";
			}
			var llmElement = document.getElementById(LLMposition);
			if (llmElement) {
				llmElement.innerHTML = response;
				llmElement.style.display = "block";
			}

			// Re-enable input
			chatInput.disabled = false;
			chatInput.removeEventListener('input', handleInputChange);
			chatInput.addEventListener('input', handleInputChange);
		}, function(error) {
			console.log("Error:", error);
			
			// Hide loading dot and display error message
			if (dotElement) {
				dotElement.style.display = "none";
			}
			var llmElement = document.getElementById(LLMposition);
			if (llmElement) {
				llmElement.innerHTML = "Sorry, I'm having trouble responding right now. Please try again.";
				llmElement.style.display = "block";
			}

			// Re-enable input
			chatInput.disabled = false;
			chatInput.removeEventListener('input', handleInputChange);
			chatInput.addEventListener('input', handleInputChange);
		});
	}
});

Qualtrics.SurveyEngine.addOnUnload(function()
{
	/*Place your JavaScript here to run when the page is unloaded*/

});