Qualtrics.SurveyEngine.addOnload(function()
{
	/*Place your JavaScript here to run when the page loads*/
	//this.hideNextButton();

});

Qualtrics.SurveyEngine.addOnReady(function()
{
	/*Place your JavaScript here to run when the page is fully displayed*/
	document.getElementById('LLM1_dot').style.display = "block";
	document.getElementById('chatInput').disabled = true;
	document.getElementById('submit-btn').disabled = true;

	var chat = document.getElementById('chatBox');

	/*TODO : We need to handle errors due to missing summary for offline server, etc.*/
	/*TODO : We need to add an error div at the frontend that warns the participant that there has been an error and what to do to handle it.*/

	/*TODO : Add error handling due to missing summary*/
	//var summary = Qualtrics.SurveyEngine.getEmbeddedData('summary') || "[missing summary]";

	/*TODO : QUERY LLM HERE!*/
	var LLMmessage = "The message generated by LLM will appear here.";

	console.log(LLMmessage);

	/*TODO : Add error handling if LLM doesn't give a response*/
	if (LLMmessage) {
		document.getElementById('LLM1_dot').style.display = "none";
		const interactions = chat.querySelectorAll("div");
		for (let i = 0; i < interactions.length; i++) {
			const interaction = interactions[i]
			const placeholder = interaction.innerHTML;
			if (placeholder.trim() == 'LLMPlaceholder') {
				interaction.innerHTML = LLMmessage;
				interaction.style.display = "block";
				break;
			}
		}

		const textInput = document.getElementById('chatInput');
		const submit_btn = document.getElementById('submit-btn');
		textInput.disabled = false;
		textInput.addEventListener('input', function() {
			if (textInput.value.trim() !== '') {
                submit_btn.disabled = false;
            }
        });
	}
	
	const submit_btn = document.getElementById('submit-btn');
	submit_btn.onclick = function(event) {
		const textInput = document.getElementById('chatInput');
		var message = textInput.value.trim();
		if (message) {
			const interactions = chat.querySelectorAll("div");
			for (let i = 0; i < interactions.length; i++) {
				const interaction = interactions[i]
				const placeholder = interaction.innerHTML;
				if (placeholder.trim() == 'UserPlaceholder') {
					interaction.innerHTML = message;
					interaction.style.display = "block";
					break;
				}
			}
        	textInput.value = '';
        	chat.scrollTop = chat.scrollHeight;
        	LLMTalk();
      }
	}

	// Function to send chat to OpenRouter API
	async function sendChatToOpenRouter(userMessage, onSuccess, onError) {
        // var pid = Qualtrics.SurveyEngine.getEmbeddedData('party');
        // var treatment = Qualtrics.SurveyEngine.getEmbeddedData('in_out_group'); // outgroup_agree, outgroup_disagree, ingroup_agree, ingroup_disagree
        // var group = Qualtrics.SurveyEngine.getEmbeddedData('group'); // the group corresponding to the treatment. Dem or Rep
        // var topic = Qualtrics.SurveyEngine.getEmbeddedData('topic'); // Gun Rights, Abortion, etc.

        var pid = 'Democrat';
        var treatment = 'outgroup_agree';
        var group = 'Democrat';
        var topic = 'Gun Rights';

        var optional_disagreement_blurb = '';
        if (treatment == 'outgroup_disagree' || treatment == 'ingroup_disagree') {
            optional_disagreement_blurb = `, even though it is not typical for ${group} to do so. `;
        }

        const system_prompt = `You are a chatbot designed to reflect the values and viewpoints typically associated with ${group}. \
        You will be having a conversation with a person who is ${pid} where you show that some ${group} agree with the participant's stance on ${topic}${optional_disagreement_blurb}. \
        Present well-reasoned supporting arguments. Maintain respect throughout the conversation and use simple language that an average person can understand. \
        Nudge the participant towards keeping the conversation going by asking questions and making comments that encourage them to share their thoughts. Keep your responses short and concise.`;

        var apiKey = "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";
        var OR_model = "mistralai/mistral-small-3.2-24b-instruct";
        // // Get API key from Qualtrics embedded data
        // var apiKey = Qualtrics.SurveyEngine.getEmbeddedData('OpenRouterAPIKey');
        // var OR_model = Qualtrics.SurveyEngine.getEmbeddedData('setModel') || "mistralai/mistral-small-3.2-24b-instruct";
        
        // // Debug: Check if API key is available
        // console.log("API Key available:", apiKey ? "Yes" : "No");
        // console.log("API Key length:", apiKey ? apiKey.length : 0);
        // console.log("Model:", OR_model);

        // // Fallback to hardcoded key if embedded data is not available (for testing)
        // if (!apiKey) {
        //     apiKey = "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";
        //     console.log("Using fallback API key");
        // }

        const url = "https://openrouter.ai/api/v1/chat/completions";
        const headers = {
            "Authorization": `Bearer ${apiKey}`,
            "Content-Type": "application/json"
        };
        
        // Debug: Log headers (without showing full API key)
        console.log("Headers:", {
            "Authorization": `Bearer ${apiKey.substring(0, 10)}...`,
            "Content-Type": headers["Content-Type"]
        });
        
        const payload = {
            "model": OR_model,
            "messages": [
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": userMessage
                }
            ],
            "stream": false
        };

        console.log("Payload:", payload);

        try {
            const response = await fetch(url, {
                method: "POST",
                headers,
                body: JSON.stringify(payload)
            });

            console.log("Response status:", response.status);
            console.log("Response headers:", response.headers);

            if (!response.ok) {
                const errorText = await response.text();
                console.error("Error response body:", errorText);
                throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            console.log("Response data:", data);
            const gptResponse = data.choices[0].message.content;
            onSuccess(gptResponse);
        } catch (error) {
            console.error("Error from OpenRouter:", error);
            onError("Error: " + error.message);
        }
	}

	function LLMTalk() {

		document.getElementById('chatInput').disabled = true;
		document.getElementById('submit-btn').disabled = true;

		//Get the whole thread of conversation and also the position of the LLM to write
		var all_interatcions = [];
		//all_interatcions.push('User:'+summary);
		var LLMposition = "";
		const interactions = chat.querySelectorAll("div");
		for (let i = 0; i < interactions.length; i++) {
			const interaction = interactions[i]
			const placeholder = interaction.innerHTML;
			const idd = interaction.id;
			if (placeholder.trim() == 'LLMPlaceholder'){
				LLMposition = idd;
				break;
			}
			if (idd.endsWith("dot"))
				continue;
			if (idd.startsWith("LLM"))
				all_interatcions.push('LLM:'+placeholder);
			else if (idd.startsWith("user"))
				all_interatcions.push('User:'+placeholder);
		}

		console.log(all_interatcions)

		//TODO : if legth of all_interactions is 10 (5 conversation turns) then inform the user and stop the conversation. 

		var dott_id = LLMposition.split("_")[0] + '_dot';
		document.getElementById(dott_id).style.display = "block";

		// Get system message and user message from embedded data
		// var systemMessage = Qualtrics.SurveyEngine.getEmbeddedData('systemPrompt') || "You are a helpful assistant.";
		var userMessage = all_interatcions.join('\n'); // Combine all interactions into one message

		// Send to OpenRouter API
        console.log("** Sending to OpenRouter API **");
		sendChatToOpenRouter(userMessage, function(response) {
			console.log("OpenRouter says:", response);
			
			// Hide loading dot and display response
			document.getElementById(dott_id).style.display = "none";
			document.getElementById(LLMposition).innerHTML = response;
			document.getElementById(LLMposition).style.display = "block";

			// Re-enable input
			const textInput = document.getElementById('chatInput');
			const submit_btn = document.getElementById('submit-btn');
			textInput.disabled = false;
			textInput.addEventListener('input', function() {
				if (textInput.value.trim() !== '') {
					submit_btn.disabled = false;
				}
			});
		}, function(error) {
			console.log("Error:", error);
			
			// Hide loading dot and display error message
			document.getElementById(dott_id).style.display = "none";
			document.getElementById(LLMposition).innerHTML = "Sorry, I'm having trouble responding right now. Please try again.";
			document.getElementById(LLMposition).style.display = "block";

			// Re-enable input
			const textInput = document.getElementById('chatInput');
			const submit_btn = document.getElementById('submit-btn');
			textInput.disabled = false;
			textInput.addEventListener('input', function() {
				if (textInput.value.trim() !== '') {
					submit_btn.disabled = false;
				}
			});
		});
	}
});

Qualtrics.SurveyEngine.addOnUnload(function()
{
	/*Place your JavaScript here to run when the page is unloaded*/

});